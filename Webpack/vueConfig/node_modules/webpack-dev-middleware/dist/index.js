const { validate } = require("schema-utils");

const mime = require("mime-types");

const middleware = require("./middleware");

const getFilenameFromUrl = require("./utils/getFilenameFromUrl");

const setupHooks = require("./utils/setupHooks");

const setupWriteToDisk = require("./utils/setupWriteToDisk");

const setupOutputFileSystem = require("./utils/setupOutputFileSystem");

const ready = require("./utils/ready");

const schema = require("./options.json");

const noop = () => {};


function wdm(compiler, options = {}) {
  // 校验options.json
  validate(
  schema, options, {
    name: "Dev Middleware",
    baseDataPath: "options"
  });
  const { mimeTypes } = options;

  // mimeType覆盖
  if (mimeTypes) {
    const { types } = mime;
    mime.types = { ...types,  ...mimeTypes };
  }
  // 
  const context = {
    state: false,
    stats: undefined,
    callbacks: [],
    options,
    compiler,
    watching: undefined,
    logger: compiler.getInfrastructureLogger("webpack-dev-middleware"),
    outputFileSystem: undefined
  };
  setupHooks(context); // 给context上面添加了invalid，done和watchRun三个hooks

  if (options.writeToDisk) {
    setupWriteToDisk(context); // 将内容写入到内存中
  }

  setupOutputFileSystem(context); // 开始监听

  if (context.compiler.watching) {
    context.watching = context.compiler.watching;
  } else {
    let watchOptions;
    const errorHandler = error => {
      if (error) {
        context.logger.error(error);
      }
    };

    if (Array.isArray(context.compiler.compilers)) {
      watchOptions = context.compiler.compilers.map(childCompiler => childCompiler.options.watchOptions || {});
      context.watching = context.compiler.watch(watchOptions, errorHandler);
    } else {
      watchOptions = context.compiler.options.watchOptions || {};
      context.watching = context.compiler.watch(watchOptions, errorHandler);
    }
  }

  const instance = middleware(context); // API

  instance.getFilenameFromUrl = url => getFilenameFromUrl(context, url);

  instance.waitUntilValid = (callback = noop) => {
    ready(context, callback);
  };

  instance.invalidate = (callback = noop) => {
    ready(context, callback);
    context.watching.invalidate();
  };


  instance.close = (callback = noop) => {
    context.watching.close(callback);
  };

  instance.context = context;
  return instance;
}

module.exports = wdm;